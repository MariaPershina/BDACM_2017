plot(density(Answer.not.cheap), xlim=c(0, m))
plot(density(Answer.neither.cheap), xlim=c(0, m))
plot(density(data.car$Answer.neither), xlim=c(0, m))
plot(density(Answer.neither.tall), xlim=c(0, m))
plot(density(Answer.not.expensive), xlim=c(0, m))
plot(density(Answer.neither.expensive), xlim=c(0, m))
plot(density(Answer.expensive), xlim=c(0, m))
Answer.not.cheap
source('~/.active-rstudio-document')
par(mfrow=c(2,4))
plot(density(Answer.short), xlim=c(0, 450))
plot(density(Answer.not.short), xlim=c(0, 450))
plot(density(Answer.neither.short), xlim=c(0, 450))
plot(density(Answer.neither), xlim=c(0, 450))
plot(density(Answer.neither.tall), xlim=c(0, 450))
plot(density(Answer.not.long), xlim=c(0, 450))
plot(density(Answer.neither.long), xlim=c(0, 450))
plot(density(Answer.long), xlim=c(0, 450))
par(mfrow=c(2,4))
plot(density(Answer.short), xlim=c(0, 450))
plot(density(Answer.not.short), xlim=c(0, 450))
plot(density(Answer.neither.short), xlim=c(0, 450))
plot(density(Answer.neither), xlim=c(0, 450))
plot(density(Answer.not.long), xlim=c(0, 450))
plot(density(Answer.neither.long), xlim=c(0, 450))
plot(density(Answer.long), xlim=c(0, 450))
plot(density(data.movie$Answer.neither), xlim=c(0, 450))
source('~/Desktop/data/svn/scales_evolution/fuzzy-action/experiments/eval.dev.r')
par(mfrow=c(2,4))
m = 100000
plot(density(Answer.cheap), xlim=c(0, m))
plot(density(Answer.not.cheap), xlim=c(0, m))
plot(density(Answer.neither.cheap), xlim=c(0, m))
plot(density(data.car$Answer.neither), xlim=c(0, m))
plot(density(Answer.neither.tall), xlim=c(0, m))
plot(density(Answer.not.expensive), xlim=c(0, m))
plot(density(Answer.neither.expensive), xlim=c(0, m))
plot(density(Answer.expensive), xlim=c(0, m))
source('~/Desktop/data/svn/programming/R/evolution/choice_principles/2by2_symmetric_games.r')
curve(- (2*x^2 - x) / (2*x^2 - s - 1))
curve(- (2*x^2 - x) / (2*x^2 - x - 1))
f = function(x) return (- (2*x^2 - x) / (2*x^2 - x - 1))
f(0.5)
f(0)
f(0.1)
f(0.2)
f(0.3)
curve(f(x))
curve(f(x), from = 0, to = 0.5)
curve(f(x), from = 0, to = 0.75)
curve(f(x), from = 0, to = 0.85)
curve(f(x), from = 0, to = 0.8)
f(1/sqrt(2))
f(1/sqrt(2)3^2)
3^2
curve(f(x), from = 0, to = 0.8)
curve(f(x), from = 0, to = 0.83)
f(0.8)
f(0.82)
f(0.81)
f(0.805)
f(0.809)
f(0.8099)
f(0.8097)
f(0.8095)
f(0.8092)
0.7^2
f(0.7)
0.7-0.49
requie('mvtnorm')
require('mvtnorm')
help(mvtnorm)
volume = function(s, n){
s^n/factorial(n) * sqrt(n+1 / 2^n)
}
x = seq(0,1,length.out = 100)
n = 3
y = sapply(x, function(i) volume(1-i,3))
plot(x,y)
plot(x, sapply(x, function(i) volume(1-i,4)))
plot(x, sapply(x, function(i) volume(1-i,5)))
mean(sapply(x, function(i) volume(1-i,5)))
sum(x * sapply(x, function(i) volume(1-i,5)))
sum(x)
x
sum(sapply(x, function(i) volume(1-i,5)))
plot(x, sapply(x, function(i) volume(1-i,50)))
mean(sapply(x, function(i) volume(1-i,50)))
y = sapply(x, function(i) volume(1-i,50)))
y = sapply(x, function(i) volume(1-i,50))
y = y/sum(y)
y
mean(y)
1/50
y = sapply(x, function(i) volume(1-i,5))
y = y/sum(y)
mean(y)
y
sum(x*y)
cor(x = c(0.25,0.75), y = c(1/3, 2/3))
cor.test(x = c(0.25,0.75), y = c(1/3, 2/3))
data = read.csv('~/Desktop/data.csv')
head(data)
table(data$id)
table(data$language)
table(data$scenarioLabel)
table(data$word)
table(data$bin,data$word)
t(table(data$bin,data$word))
table(data$scenarioLabel,data$bin,data$word)
table(data$scenarioLabel,data$bin,data$type)
table(data$scenarioLabel,data$type, data$bin)
table( data$type, data$bin, data$scenarioLabel)
require(reshape2)
require(plyr)
source('~/Desktop/data/svn/programming/R/helpers/helpers.R')
data = read.csv('Desktop/adj_production2.csv')
head(data)
attach(data)
table(id)
table(comments)
table(data$antonymPair)
table(data$antonymPair, bin)
head(data)
table(bin)
table(difficulty)
table(engagement)
table(answer)
table(type)
summarySE(data, measurevar = "RT", groupvars = c("answer", "type"))
summarySE(data, measurevar = "answer", groupvars = c("scenarioLabel", "type"))
summarySE(data, measurevar = "answer", groupvars = c("scenarioLabel", "type", "bin"))
summarySE(data, measurevar = "answer", groupvars = c("scenarioLabel", "bin", "type")) -> x
head(x)
summarySE(data, measurevar = "answer", groupvars = c("scenarioLabel", "type", "bin")) -> x
head(x)
data$answer
summarySE(data, measurevar = "binary", groupvars = c("scenarioLabel", "type", "bin")) -> x
data$binary = ifelse(data$answer == "true", 1, 0)
summarySE(data, measurevar = "binary", groupvars = c("scenarioLabel", "type", "bin")) -> x
head(x)
x
x = c(0, 25, 33, 42, 22, 50, 1, 50, 100, 36, 43, 21, 6, 5, 22)
mean(x)
abs(x = mean(x))
abs(x - mean(x))
which.min(abs(x - mean(x)))
which.min(abs(x - 0.66*mean(x)))
exp(log(1))
exp(log(3.4))
exp(log(1/3) - 5) / (exp(log(1/3) - 5) + exp(log(0.5)))
load(ss)
source('~/Desktop/swap_box/programming_dev/R/priorEstimation/priorEstim/main.R')
0.5^0.5
source('~/Desktop/temp.R')
install.packages('shiny')
source('~/Desktop/temp.R')
rdirichlet(1, rep(1, 12))
require('gtools')
rdirichlet(1, rep(1, 12))
rdirichlet(1, rep(1, 12)) -> y
round(y,2)
paste0(round(y,2), collapse = ", ")
sum(x)
source('~/.active-rstudio-document', echo=TRUE)
sum(x)
curve(x^(0.4))
curve(x^(1))
curve(x^(0.2))
d = read.csv('~/Desktop/Batch_2175252_batch_results.csv')
head(d)
hist(d$WorkTimeInSeconds)
which(d$WorkTimeInSeconds <=20)
which(d$WorkTimeInSeconds <=10)
length(which(d$WorkTimeInSeconds <=10))
length(d$WorkerId) - length(which(d$WorkTimeInSeconds <=10))
length(d$WorkerId) - length(which(d$WorkTimeInSeconds <=20))
length(d$WorkerId) - length(which(d$WorkTimeInSeconds <=30))
length(d$WorkerId) - length(which(d$WorkTimeInSeconds <=60))
132*2
length(d$WorkerId)
set.seed(1638)
A = rnorm(100, mean = 100, sd = 10)
B = rnorm(100, mean = 110, sd = 15)
mean(A) - mean(B)
install.packages('rstan', dependencies = TRUE)
library('rstan')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
model = "data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}"
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = textConnection(model), data = schools_dat,
iter = 1000, chains = 4)
fit <- stan(file = textConnection(model), data = schools_dat,
iter = 1000, chains = 4)
help("textConnection")
fit <- stan(file = '~/Desktop/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
fit
plot(fit)
chains(fit)
help("stanfit-class")
mylist = As.mcmc.list(fit)
require('ggmcmc')
ms = ggs(mylist)
ggs_density(ms)
ggs_density(ms, family = "mu|tau")
fit <- stan(file = '~/Desktop/8schools.stan', data = schools_dat,
iter = 10000, chains = 4)
ms = ggs(As.mcmc.list(fit))
ggs_density(ms, family = "mu|tau")
ggs_Rhat(ms, family = "mu|tau")
ggs_traceplot(ms, family = "mu|tau")
m = as.matrix(fit)
head(m)
m = as.data.frame(fit)
head(m)
help(head)
tail(m)
tail(as.matrix(fit))
chisq.test(c(15,25))
chisq.test(c(52,48))
chisq.test(c(0.52,0.48)*30)
chisq.test(c(0.52,0.48)*35)
chisq.test(c(0.52,0.48)*37)
chisq.test(c(0.52,0.48)*32)
chisq.test(c(0.52,0.48)*33)
chisq.test(c(0.52,0.48)*28)
chisq.test(c(0.52,0.48)*27)
chisq.test(c(0.52,0.48)*25)
chisq.test(c(0.52,0.48)*26)
chisq.test(c(0.52,0.48)*24)
chisq.test(c(0.52,0.48)*23)
chisq.test(c(0.52,0.48)*22)
chisq.test(c(0.52,0.48)*23)
chisq.test(c(0.52,0.48, 0.4)*23,)
chisq.test(c(0.52,0.48, 0.3)*23,)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, dev.args = list(bg = 'transparent'))
require('gtools')
require('combinat')
require('ggplot2')
require('gridExtra')
require('reshape2')
theme_set(theme_grey() + theme(plot.background=element_blank()) )
source("//Users/micha/Desktop/data/svn/joint-pragmatic-inferences/experiments/01_nestedAristotleAliens/data/02_main/data_exploration.r")
normalize = function(x){ return(x / sum(x))}
## get lenient semantics
g = create.game.exh(relaxed = TRUE)
# f = create.game.exh(relaxed = FALSE)
semantics = matrix(-1, ncol = nm, nrow = ns)
rownames(semantics) = state.names
colnames(semantics) = message.names
for (s in 1:ns){
for (m in 1:nm){
semantics[s,m] = max(max(g[s,m,]), max(g[s,m,]))
# semantics[s,m] = max(max(g[s,m,]), max(f[s,m,]))
}
}
prodData = melt(prop.table(prodCounts,1)) %>%
mutate(condition = factor(rep(as.character(rownames(prodCounts)),9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE),
model = "") %>%
rename(data = value, utterance = prodAnswer)
semantics = mutate(prodData, data = ifelse(melt(semantics)$value ==1, 0.05,NA),
model = "")
# prodData = rbind(prodData,semantics)
dataPlot = ggplot(prodData, aes(x = model, y = data)) + geom_bar(stat = "identity", fill = "gray") + facet_grid(condition ~ utterance) +
geom_point(data = semantics, aes(x = model, y = data), color = "firebrick")
show(dataPlot)
dataPlot
prodData
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$model = ""
ggplot(datFrame, aes(y = value, x = model)) + geom_bar(stat = "identity") + facet_grid(Var1 ~ Var2)
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$Var2 = factor(rep(as.character(rownames(prodCounts)),9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datFrame$model = ""
ggplot(datFrame, aes(y = value, x = model)) + geom_bar(stat = "identity", fill = "gray") +
facet_grid(Var1 ~ Var2)
datFrame = melt(datMat)
datFrame
rep(as.character(rownames(prodCounts)),9)
datFrame$Var2
datFrame$Var2 = factor(rep(as.character(rownames(prodCounts)), each = 9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$Var2 = factor(rep(as.character(rownames(prodCounts)), each = 9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datFrame$model = ""
ggplot(datFrame, aes(y = value, x = model)) + geom_bar(stat = "identity", fill = "gray") +
facet_grid(Var1 ~ Var2)
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$Var2 = factor(rep(as.character(rownames(prodCounts)), each = 9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datFrame$model = ""
ggplot(datFrame, aes(y = value, x = model)) + geom_bar(stat = "identity", fill = "gray") +
facet_grid(Var1 ~ Var2) +
geom_point(data = semantics, aes(x = model, y = data), color = "firebrick")
semantics
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$Var2 = factor(rep(as.character(rownames(prodCounts)), each = 9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datFrame$model = ""
datFrame$data = datFrame$value
ggplot(datFrame, aes(y = data, x = model)) + geom_bar(stat = "identity", fill = "gray") +
facet_grid(Var1 ~ Var2) +
geom_point(data = semantics, aes(x = model, y = data), color = "firebrick")
semantics
datFrame
datMat = matrix(c(0.26, 0.09, 0.06, 0.05, 0.20, 0.15, 0.19,
0.53, 0.07, 0.12, 0.05, 0.05, 0.04, 0.14,
0.29, 0.25, 0.03, 0.04, 0.30, 0.04, 0.05,
0.15, 0.25, 0.26, 0.24, 0.03, 0.04, 0.03,
0.02, 0.23, 0.11, 0.21, 0.14, 0.22, 0.06,
0.03, 0.04, 0.26, 0.25, 0.03, 0.25, 0.14,
0.69, 0.07, 0.05, 0.04, 0.05, 0.03, 0.06,
0.03, 0.04, 0.03, 0.05, 0.41, 0.27, 0.17,
0.07, 0.03, 0.05, 0.06, 0.04, 0.05, 0.71), byrow = T, nrow = 9)
rownames(datMat) = c("NN", "NS", "xNA", "SN", "SS", "SA", "AN", "AS", "AA")
colnames(datMat) = c("t100",  "t110" ,  "t101" ,  "t111" ,  "t010" ,  "t011" ,  "t001")
datFrame = melt(datMat)
# datFrame$Var2 = factor(colnames(datMat), ordered = T)
datFrame$condition = factor(rep(as.character(rownames(prodCounts)), each = 9), levels = c('100', '110', '101', '111', '010', '011', '001'), ordered = TRUE)
datFrame$model = ""
datFrame$data = datFrame$value
datFrame$utterance = datFrame$Var1
ggplot(datFrame, aes(y = data, x = model)) + geom_bar(stat = "identity", fill = "gray") +
facet_grid(utterance ~ condition) +
geom_point(data = semantics, aes(x = model, y = data), color = "firebrick")
devtools::install_github("mhtess/rwebppl")
install.packages('doParallel')
devtools::install_github("mhtess/rwebppl")
install.packages('jsonlite')
devtools::install_github("mhtess/rwebppl")
install.packages('tiyr')
install.packages('tidyr')
devtools::install_github("mhtess/rwebppl")
install.packages('uuid')
devtools::install_github("mhtess/rwebppl")
version
curve(asin(sqrt(x)))
x = sample(1:5, 10000)
x = sample(1:5, 10000, replace = T)
x
y = sample(1:5, 10000, replace = T)
x = x-y
x = sample(1:5, 10000, replace = T)
z = x-y
hist(z)
plot(density(z))
x = seq(0:1, length.out = 1000)
x = seq(0,1, length.out = 1000)
require(ggplot2)
qplot(x, dbeta(x, 0, 100))
qplot(x, dbeta(x, 100, 100))
qplot(x, dbeta(x, 1, 1))
qplot(x, dbeta(x, 1, 100))
qplot(x, dbeta(x, 1, 0))
qplot(x, dbeta(x, 0, 0))
choose(6,3)
c = c(3,7,4,4,8,4)
-c
exp(-c)
exp(-c) -> p
p = p/sum(p)
p
plot(p)
-c^0.5 -> p
p
p = p/sum(p)
p
plot(p)
10-c -> p
p = p/sum(p)
plot(p)
binom.test(7,24)
binom.test(18,24)
dpois(0:25, lambda = 25)
dpois(0:25, lambda = 10)
plot(0:25, dpois(0:25, lambda = 10))
require('rmarkdown')
help(render)
setwd("~/Desktop/data/svn/BDACM_2017/slides")
render('04_pProblems.Rmd', output_format = "pdf")
render('04_pProblems.Rmd', output_format = "pdfLatex")
render('04_pProblems.Rmd', output_format = "pdflatex")
render('04_pProblems.Rmd', output_format = "pdf_document")
render('04_pProblems.Rmd', output_format = "beamer_slids")
render('04_pProblems.Rmd', output_format = "beamer_slides")
render('04_pProblems.Rmd', output_format = "beamer_presentation")
install.packages('emo')
source('~/Desktop/data/svn/BDACM_2017/code/01_GCM_LeeWagenmakers_Ch17/GCM_1.R')
setwd("~/Desktop/data/svn/BDACM_2017/code/01_GCM_LeeWagenmakers_Ch17")
source('~/Desktop/data/svn/BDACM_2017/code/01_GCM_LeeWagenmakers_Ch17/GCM_1.R')
source('~/Desktop/data/svn/BDACM_2017/code/01_GCM_LeeWagenmakers_Ch17/GCM_1.R')
windows(10, 5)
par(mgp=c(2, 1, 0), mar=c(4, 4, 2, 2) + .1)
plot(NA, xlim=c(0.5, 8.5), ylim=c(0, 320), xlab="Stimulus", yaxt="n", xaxt="n",
ylab="Category Decision")
axis(side=1, 1:8)
axis(side=2, c(0, t), c("B", "A"))
for (i in 1:nstim) {
counts=hist(predy[, i], plot=FALSE, breaks=breaks)$counts
breaks=hist(predy[, i], plot=FALSE, breaks=breaks)$breaks
segments(i - counts * .00003, breaks, i + counts * .00003, breaks, col="gray",
lwd=4.5, lend=1)
}
apply(x * 40, 2, lines, lty=3, col="gray")
lines(apply(x * 40, 1, mean), lwd=3)
windows(10, 5)
par(mgp=c(2, 1, 0), mar=c(4, 4, 2, 2) + .1)
plot(NA, xlim=c(0.5, 8.5), ylim=c(0, 320), xlab="Stimulus", yaxt="n", xaxt="n",
ylab="Category Decision")
axis(side=1, 1:8)
axis(side=2, c(0, t), c("B", "A"))
for (i in 1:nstim) {
counts=hist(predy[, i], plot=FALSE, breaks=breaks)$counts
breaks=hist(predy[, i], plot=FALSE, breaks=breaks)$breaks
segments(i - counts * .00003, breaks, i + counts * .00003, breaks, col="gray",
lwd=4.5, lend=1)
}
apply(x * 40, 2, lines, lty=3, col="gray")
lines(apply(x * 40, 1, mean), lwd=3)
windows(10, 5)
par(mgp=c(2, 1, 0), mar=c(4, 4, 2, 2) + .1)
plot(NA, xlim=c(0.5, 8.5), ylim=c(0, 320), xlab="Stimulus", yaxt="n", xaxt="n",
ylab="Category Decision")
axis(side=1, 1:8)
axis(side=2, c(0, t), c("B", "A"))
for (i in 1:nstim) {
counts=hist(predy[, i], plot=FALSE, breaks=breaks)$counts
breaks=hist(predy[, i], plot=FALSE, breaks=breaks)$breaks
segments(i - counts * .00003, breaks, i + counts * .00003, breaks, col="gray",
lwd=4.5, lend=1)
}
apply(x * 40, 2, lines, lty=3, col="gray")
lines(apply(x * 40, 1, mean), lwd=3)
